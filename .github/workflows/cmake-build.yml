name: CMake build

on:
  # For the manual run.
  workflow_dispatch:
  # To run as dependent.
  workflow_call:
  workflow_run:
    workflows: ['Build and push Docker image']
    branches: [master]
    types:
      - completed
  push:
    branches: [ "master" ]
    paths:
      - 'knp/**'
      - '.github/workflows/cmake-build.yml'
      - '!/doc/**'
      - '!/docker/**'
      - '!/tools/**'
      - '!/ci/**'
  pull_request:
    branches: [ "master" ]

jobs:
  non_linux_build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run:
      matrix:
        # [macos-latest, windows-latest]
        os: [windows-latest]
        build_type: [Debug]
        c_compiler: [clang, cl]
        include:
          # - os: macos-latest
          #   c_compiler: clang
          #   cpp_compiler: clang++
          #   boost_install_dir:
          #   boost_platform_version: 11
          #   boost_toolset: clang
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            boost_install_dir: C:/
            boost_platform_version: 2022
            boost_toolset: msvc
            analyzer_path: "C:/Program Files (x86)/PVS-Studio/CompilerCommandsAnalyzer.exe"
        exclude:
          - os: windows-latest
            c_compiler: clang
          # - os: macos-latest
          #   c_compiler: cl

    steps:
      - uses: actions/checkout@v4
      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=build_windows" >> "$GITHUB_OUTPUT"

      - name: Install Boost
        uses: MarkusJx/install-boost@v2.4.5
        id: install-boost
        with:
            boost_version: 1.81.0
            boost_install_dir: ${{ matrix.boost_install_dir }}
            platform_version: ${{ matrix.boost_platform_version }}
            toolset: ${{ matrix.boost_toolset }}

      - name: Choco install tools
        uses: crazy-max/ghaction-chocolatey@v3
        with: 
          args: install pvs-studio

      # bad way
      - name: PVS-license
        env:
          PVS_NAME: ${{ secrets.PVS_STUDIO_NAME }}
          PVS_KEY: ${{ secrets.PVS_STUDIO_KEY }}
        shell: pwsh
        run: |
          Start-Process -FilePath "${{ matrix.analyzer_path }}" -NoNewWindow -Wait -ArgumentList "credentials", "$env:PVS_NAME", "$env:PVS_KEY"

      - name: Configure CMake
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S .

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel 8
        timeout-minutes: 180

      - name: PVS-Check
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --target pvs-analyze --parallel 8
        timeout-minutes: 180

    # - name: Publish package to the PyPI
      # Already on push in the master branch.
      # if: startsWith(github.head_ref, 'master')
    #  if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    #  uses: pypa/gh-action-pypi-publish@release/v1
    #  with:
    #    password: ${{ secrets.PYPI_API_TOKEN }}
    #    repository_url: https://upload.pypi.org/legacy/
    #    skip_existing: true
    #    print_hash: true
